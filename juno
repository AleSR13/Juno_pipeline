#!/bin/bash
###############################################################################################################################################
### Juno pipeline                                                                                                                     ### 
### Authors: Ernst Hamer, Alejandra Hernandez-Segura, Dennis Schmitz, Robert Verhagen, Diogo Borst, Tom van Wijk, Maaike van der Beld       ### 
### Organization: Rijksinstituut voor Volksgezondheid en Milieu (RIVM)                                                                      ### 
### Department: Infektieziekteonderzoek, Diagnostiek en Laboratorium Surveillance (IDS), Bacteriologie (BPD)                                ### 
### Date: 09-10-2020                                                                                                                        ### 
###                                                                                                                                         ### 
### Documentation: https://github.com/DennisSchmitz/BAC_gastro                                                                                  ### 
###                                                                                                                                         ### 
###                                                                                                                                         ### 
### Snakemake rules (in order of execution):                                                                                                ### 
###     1 fastQC        # Asses quality of raw reads.                                                                                       ### 
###     2 trimmomatic   # Trim low quality reads and adapter sequences.                                                                     ### 
###     3 fastQC        # Asses quality of trimmed reads.                                                                                   ### 
###     4 spades        # Perform assembly with SPAdes.                                                                                     ### 
###     5 quast         # Run quality control tool QUAST on contigs/scaffolds.                                                              ### 
###     6 checkM        # Gives scores for completeness, contamination and strain heterogeneity (optional).                                 ### 
###     7 picard        # Determines library fragment lengths.                                                                              ### 
###     8 bbmap         # Generate scaffold alignment metrics.                                                                              ### 
###     9 multiQC       # Summarize analysis results and quality assessments in a single report                                             ### 
###                                                                                                                                         ###
###############################################################################################################################################


#load in functions
set -o allexport
source bin/functions.sh
eval "$(parse_yaml profile/pipeline_parameters.yaml "params_")"
eval "$(parse_yaml profile/config.yaml "configuration_")"
set +o allexport

UNIQUE_ID=$(bin/generate_id.sh)
SET_HOSTNAME=$(bin/gethostname.sh)

### conda environment
PATH_MASTER_YAML="environments/master_env.yaml"
MASTER_NAME=$(head -n 1 ${PATH_MASTER_YAML} | cut -f2 -d ' ') # Extract Conda environment name as specified in yaml file
PATH_CHECKM_YAML="environments/CheckM.yaml"
CHECKM_NAME=$(head -n 1 ${PATH_CHECKM_YAML} | cut -f2 -d ' ') # Extract Conda environment name as specified in yaml file

### Default values for CLI parameters
INPUT_DIR="raw_data/"
OUTPUT_DIR="out/"
GENUS_ALL="NotProvided"
SKIP_CONFIRMATION="FALSE"
SNAKEMAKE_UNLOCK="FALSE"
CLEAN="FALSE"
HELP="FALSE"
HELP_GENERA="FALSE"
MAKE_SAMPLE_SHEET="FALSE"
SHEET_SUCCESS="FALSE"
CHECKM="TRUE"
UPDATE_GENUS="TRUE"
LOCAL="FALSE"

### Parse the commandline arguments, if they are not part of the pipeline, they get send to Snakemake
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -i|--input)
        INPUT_DIR="$2"
        shift # Next
        shift # Next
        ;;
        -o|--output)
        OUTPUT_DIR="$2"
        shift # Next
        shift # Next
        ;;
        --genus)
        GENUS_ALL="$2"
        shift
        shift
        ;;
        -h|--help)
        HELP="TRUE"
        shift # Next
        ;;
        --help-genera)
        HELP_GENERA="TRUE"
        shift # Next
        ;;
        -sh|--snakemake-help)
        SNAKEMAKE_HELP="TRUE"
        shift # Next
        ;;
        --clean)
        CLEAN="TRUE"
        shift # Next
        ;;
        --make-sample-sheet)
        MAKE_SAMPLE_SHEET="TRUE"
        shift # Next
        ;;
        --no-checkm)
        CHECKM="FALSE"
        UPDATE_GENUS="FALSE"
        shift # Next
        ;;
        -y)
        SKIP_CONFIRMATION="TRUE"
        shift # Next
        ;;
        -l|--local)
        LOCAL="TRUE"
        shift # Next
        ;;
        -u|--unlock)
        SNAKEMAKE_UNLOCK="TRUE"
        shift # Next
        ;;
        *) # Any other option
        POSITIONAL+=("$1") # save in array
        shift # Next
        ;;
    esac
done
set -- "${POSITIONAL[@]:-}" # Restores the positional arguments (i.e. without the case arguments above) which then can be called via `$@` or `$[0-9]` etc. These parameters are send to Snakemake.




### Print Juno help message
if [ "${HELP:-}" == "TRUE" ]; then
    line
    cat <<HELP_USAGE
Juno pipeline, version $VERSION, built with Snakemake
  Usage: bash $0 -i <INPUT_DIR> <parameters>
  N.B. it is designed for Illumina paired-end data only


Input:
  -i, --input [DIR]                 This is the folder containing your input fastq files.
                                    Default is raw_data/
  -o, --output [DIR]                This is the folder containing your output fastq files.
                                    Default is out/ 

Output (automatically generated):
  out/                              Contains dir contains the results of every step of the pipeline.

  out/log/                          Contains the log files for every step of the pipeline

  out/log/drmaa			    Contains the .out and .err files of every job sent to the grid/cluster.

  out/log/results		    Contains the log files and parameters that the pipeline used for the current run


Parameters:
  -h, --help                        Print the help document.

  --help-genera			    Prints list of accepted genera for this pipeline (based on CheckM list).

  -sh, --snakemake-help             Print the snakemake help document.

  --clean (-y)                      Removes output (-y forces "Yes" on all prompts).

  --genus                   Provide name of an approved genus to be used for CheckM. Please check --help-genera for a 
                            list of approved genera). Only one name is allowed, so if multiple samples are included in 
                            the input dir, it will be assumed that they all have the same genus. 
  
  --no-checkm			    Not run CheckM or update the genus database from CheckM

  --no-genus-update		    Not update the genus database from CheckM

  -n, --dry-run                     Useful snakemake command that displays the steps to be performed without actually 
				    executing them. Useful to spot any potential issues while running the pipeline.

  -u, --unlock                      Unlocks the working directory. A directory is locked when a run ends abruptly and 
				    it prevents you from doing subsequent analyses on that directory until it gets unlocked.

  Other snakemake parameters	    Any other parameters will be passed to snakemake. Read snakemake help (-sh) to see
				    the options.


HELP_USAGE
    exit 0
fi





### Remove all output
###> Remove all Jovian output
if [ "${CLEAN:-}" == "TRUE" ]; then
    bash bin/Clean
    exit 0
fi


###############################################################################################################
##### Create mamba environment if it doesn exist                                                          #####
###############################################################################################################
conda env update -f environments/mamba.yaml -q -v
source activate mamba
#mamba env update -f ${PATH_CHECKM_YAML}

###############################################################################################################
##### Installation block                                                                                  #####
###############################################################################################################

### Pre-flight check: Assess availability of required files, conda and master environment
if [ ! -e "${PATH_MASTER_YAML}" ]; then # If this yaml file does not exist, give error.
    line
    spacer
    echo -e "ERROR: Missing file \"${PATH_MASTER_YAML}\""
    exit 1
fi

if [[ `conda env list | grep *${MASTER_NAME}* | wc -l`  -eq 0 ]]; then # If the master environment is not in your path (i.e. it is not currently active), do...
    line
    spacer
    set +ue # Turn bash strict mode off because that breaks conda
    if [ "${SKIP_CONFIRMATION}" = "TRUE" ]; then
       echo -e "\tInstalling master environment..." 
       mamba env update -f ${PATH_MASTER_YAML} 
       echo -e "DONE"
    else
       while read -r -p "The master environment hasn't been installed yet, do you want to install this environment now? [y/n] " envanswer
       do
            envanswer=${envanswer,,}
            if [[ "${envanswer}" =~ ^(yes|y)$ ]]; then
                echo -e "\tInstalling master environment..." 
		mamba env update -f ${PATH_MASTER_YAML}
                echo -e "DONE"
                break
            elif [[ "${envanswer}" =~ ^(no|n)$ ]]; then
                echo -e "The master environment is a requirement. Exiting because Juno cannot continue without this environment"
                exit 1
            else
                echo -e "Please answer with 'yes' or 'no'"
            fi
        done
    fi
    source activate "${MASTER_NAME}"
    set -ue # Turn bash strict mode on again
fi


if [ "${SNAKEMAKE_UNLOCK}" == "TRUE" ]; then
    printf "\nUnlocking working directory...\n"
    snakemake -s Snakefile --config checkm=$CHECKM out=$OUTPUT_DIR genus=$GENUS_ALL --profile profile --unlock
    printf "\nDone.\n"
    exit 0
fi


### Print Snakemake help
if [ "${SNAKEMAKE_HELP:-}" == "TRUE" ]; then
    line
    snakemake --help
    exit 0
fi


### Pass other CLI arguments along to Snakemake
if [ ! -d "${INPUT_DIR}" ]; then
    minispacer
    echo -e "The input directory specified (${INPUT_DIR}) does not exist"
    echo -e "Please specify an existing input directory"
    minispacer
    exit 1
fi


# Download and update genus list
if [ "${UPDATE_GENUS}" == "TRUE" ]; then
    printf "\nCollecting available genera from CheckM...\n"
    set +ue # Turn bash strict mode off because that breaks conda
    source activate mamba
    mamba env update -f ${PATH_CHECKM_YAML}
    source activate "${CHECKM_NAME}"
    checkm taxon_list > checkm_taxon_list.txt  
    source activate mamba
    source activate "${MASTER_NAME}"
    ### Genus help
    ### Display all the genera accepted by CheckM
    if [ "${HELP_GENERA:-}" == "TRUE" ]; then
        spacer
        GENERA=`grep genus checkm_taxon_list.txt | awk -F ' ' '{print $2}'`
        line
        echo -e "The genera that CheckM currently accepts are: "
        minispacer
        pr -4 -t -w 120 <<eof
$GENERA
eof
        set -ue
        exit 0
    fi
    set -ue
fi


### Generate sample sheet
if [  `ls -A "${INPUT_DIR}" | grep 'R[0-9]\{1\}.*\.f[ast]\{0,3\}q\.\?[gz]\{0,2\}$' | wc -l` -gt 0 ]; then
    minispacer
    echo -e "Files in input directory (${INPUT_DIR}) are present"
    echo -e "Generating sample sheet..."
    python bin/generate_sample_sheet.py "${INPUT_DIR}" > sample_sheet.yaml
    if [ $(wc -l sample_sheet.yaml | awk '{ print $1 }') -gt 2 ]; then
        SHEET_SUCCESS="TRUE"
    fi
else
    minispacer
    echo -e "The input directory you specified (${INPUT_DIR}) exists but is empty or does not contain the expected input files...\nPlease specify a directory with input-data."
    exit 0
fi

### Checker for succesfull creation of sample_sheet
if [ "${SHEET_SUCCESS}" == "TRUE" ]; then
    echo -e "Succesfully generated the sample sheet"
    echo -e "ready_for_start"
else
    echo -e "Couldn't find files in the input directory that ended up being in a .FASTQ, .FQ or .GZ format"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the files are in one of the formats listed below"
    echo -e ".fastq.gz (Zipped Fastq)"
    echo -e ".fq.gz (Zipped Fq)"
    echo -e ".fastq (Unzipped Fastq)"
    echo -e ".fq (unzipped Fq)"
    exit 1
fi


if [ "${MAKE_SAMPLE_SHEET}" == "TRUE" ]; then
    echo -e "Juno_run:\n    identifier: ${UNIQUE_ID}" > profile/variables.yaml
    echo -e "Server_host:\n    hostname: http://${SET_HOSTNAME}" >> profile/variables.yaml
    echo -e "The sample sheet and variables file has now been created, you can now run the snakefile manually"
    exit 0
fi


### Actual snakemake command with checkers for required files. N.B. here the UNIQUE_ID and SET_HOSTNAME variables are set!
if [ -e sample_sheet.yaml ]; then
    echo -e "Starting snakemake"
    set +ue #turn off bash strict mode because snakemake and conda can't work with it properly
    echo -e "pipeline_run:\n    identifier: ${UNIQUE_ID}" > profile/variables.yaml
    echo -e "Server_host:\n    hostname: http://${SET_HOSTNAME}" >> profile/variables.yaml
    eval $(parse_yaml profile/variables.yaml "config_")
    if [ $LOCAL == "TRUE" ]; then
        snakemake --config checkm=$CHECKM out=$OUTPUT_DIR genus=$GENUS_ALL --profile profile ${@}
    else
        snakemake --config checkm=$CHECKM out=$OUTPUT_DIR genus=$GENUS_ALL --profile profile --drmaa " -q bio -n {threads} -R \"span[hosts=1]\"" --drmaa-log-dir ${OUTPUT_DIR}/log/drmaa ${@}
    fi
    #echo -e "\nUnique identifier for this run is: $config_run_identifier "
    echo -e "Juno run complete"
    set -ue #turn bash strict mode back on
else
    echo -e "Sample_sheet.yaml could not be found"
    echo -e "This also means that the pipeline was unable to generate a new sample sheet for you"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the right files are present"
    exit 1
fi

exit 0 
